userName of User and roleIdentifier of Role entities are unique.Can be ensured with unique Db constraint
The User,Role,ActionType and Resource can be easily converted to Doa layer where each of them will become entities and we can have repositries on them
The enum ActionType and Resource can be made to classes and extend the system logic by allowing to add new resources and action types
The code can be tested with junit and integration test.
The class variables like Lists can be cloned in getters while accessing them.
Hello is just test run class.
The catch block in RoleBasedSystem Controller can have customised exception handling.
The application.properties has h2 datasource config so that the User,Role,ActionType and Resource can be easily converted to data layer entities and mapp using JPA.


My code logic:
Resources and their access levels are tied to a specific role type.
Users have a list of roles.
AuthSystem and all the users and roles in system and can manage the addition and deletion of roles to a user.
It can be extended to add new users,roles,actiontypes and resources
AccessSystem has apis to control to checkAccess.
It can to extended to check User Or Role validity.
